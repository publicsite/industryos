--- live-wrapper/lwr/apt_udeb.py.old	2018-04-12 19:03:27.657294598 +0100
+++ live-wrapper/lwr/apt_udeb.py	2018-04-12 01:14:42.853806000 +0100
@@ -15,6 +15,7 @@
 import apt
 import apt_pkg
 import cliapp
+from lwr.utils import copytree
 from vmdebootstrap.base import copy_files, runcmd
 from subprocess import check_output
 import distro_info
@@ -24,6 +25,46 @@
 # handle a supplementary apt source for local udebs
 # unique sort the combined package names
 
+def _file_is_same(path, size, md5):
+    #this function came from python-apt to support fetch_binary_tempfix
+    """Return ``True`` if the file is the same."""
+    if (os.path.exists(path) and os.path.getsize(path) == size and
+        apt_pkg.md5sum(open(path)) == md5):
+        return True
+
+def fetch_binary_tempfix(version, destdir='', progress=None):
+    #this function (fetch_binary) came from python-apt and wasn't working properly as AcquireFile, arg3 (self._records.md5_hash) wanted a formatted string with no special chars (null etc.)
+    #it is fixed here, along with some name changes
+
+    #hopefully these things can be implemented sometime upstream
+    # type: (str, AcquireProgress) -> str
+    """Fetch the binary version of the package.
+
+    The parameter *destdir* specifies the directory where the package will
+    be fetched to.
+
+    The parameter *progress* may refer to an apt_pkg.AcquireProgress()
+    object. If not specified or None, apt.progress.text.AcquireProgress()
+    is used.
+
+    .. versionadded:: 0.7.10
+    """
+    base = os.path.basename(version._records.filename)
+    destfile = os.path.join(destdir, base)
+    if _file_is_same(destfile, version.size, version._records.md5_hash):
+        logging.debug('Ignoring already existing file: %s' % destfile)
+        return os.path.abspath(destfile)
+    acq = apt_pkg.Acquire(progress or apt.progress.text.AcquireProgress())
+    acqfile = apt_pkg.AcquireFile(acq, version.uri, version.record.__getitem__('MD5Sum'),
+                                      version.size, base, destfile=destfile)
+    acq.run()
+
+    if acqfile.status != acqfile.STAT_DONE:
+        raise FetchError("The item %r could not be fetched: %s" %
+                         (acqfile.destfile, acqfile.error_text))
+
+    return os.path.abspath(destfile)
+
 
 class AptUdebDownloader(object):
 
@@ -97,79 +138,106 @@
         pkg = self.cache[name]
         if not hasattr(pkg, 'versions'):
             raise cliapp.AppException('%s has no available versions.' % name)
-        if len(pkg.versions) > 1:
-            pkg.version_list.sort(apt_pkg.version_compare) # pylint: disable=no-member
-            version = pkg.version_list[0]
-            print("Multiple versions returned for %s - using newest: %s" % (name, pkg.version_list[0]))
-        else:
-            version = pkg.versions[0]
+        # Pick the highest version of the package, which has a uri, in case there are >1
+        version=pkg.versions[0]
+        for aversion in pkg.versions:
+            if ( version.__lt__(aversion) or not version.uri ) and aversion.uri: 
+                version = aversion
         if not version.uri:
             raise cliapp.AppException('Not able to download %s' % name)
         try:
-            version.fetch_binary(destdir=destdir)
-        except TypeError as exc:
-            return None
+            filename = fetch_binary_tempfix(version, destdir=destdir)
         except apt.package.FetchError as exc:
             raise cliapp.AppException('Unable to fetch %s: %s' % (name, exc))
-        filename = os.path.join(destdir, os.path.basename(version.record['Filename']))
         if os.path.exists(filename):
             return filename
         return None
 
-
-    def download_udebs(self, exclude_list):
+    def download_apt_file(self, pkg_name, pool_dir, fatal):
         if not self.cache:
             raise cliapp.AppException('No cache available.')
-        main_pool = os.path.join(self.destdir, '..', 'pool', 'main')
-        os.makedirs(main_pool)
+        pkg = self.cache[pkg_name]
+        if not hasattr(pkg, 'versions'):
+            if fatal:
+                raise cliapp.AppException('%s has no available versions.' % pkg_name)
+            return
+        # Pick the highest version of the package, in case there are >1
+        version=pkg.versions[0]
+        for aversion in pkg.versions:
+            if ( version.__lt__(aversion) or not version.uri ) and aversion.uri: 
+                version = aversion
+        if not version.uri:
+            if fatal:
+                raise cliapp.AppException('Not able to download %s' % pkg_name)
+            return
+        prefix = version.source_name[0]
+        # pool_dir is just a base, need to add main/[index]/[name]
+        if version.source_name[:3] == 'lib':
+            prefix = version.source_name[:4]
+        pkg_dir = os.path.join(pool_dir, prefix, version.source_name)
+        #pkg_dir = re.escape(pkg_dir.replace('\x00',""))
+        if not os.path.exists(pkg_dir):
+            os.makedirs(pkg_dir)
+        try:
+            #logging.debug("md5 is...")
+            #logging.debug(version.md5.encode('utf-8'))
+            fetch_binary_tempfix(version,destdir=pkg_dir)
+        except apt.package.FetchError as exc:
+            raise cliapp.AppException('Unable to fetch %s: %s' % (pkg_name, exc))
+
+    def download_udebs(self, exclude_list):
+        # HACK HACK HACK
+        # Setting up a separate pool for udebs, as apt-ftparchive
+        # isn't generating separate Packages files
+        pool_dir = os.path.join(self.destdir, '..', 'udeb', 'pool', 'main')
+        if not os.path.exists(pool_dir):
+            os.makedirs(pool_dir)
         for pkg_name in self.cache.keys():
-            prefix = pkg_name[0]
-            # destdir is just a base, needs pool/main/[index]/[name]
-            if pkg_name[:3] == 'lib':
-                prefix = pkg_name[:4]
-            pkg_dir = os.path.join(main_pool, prefix, pkg_name)
             if pkg_name in exclude_list:
                 continue
-            pkg = self.cache[pkg_name]
-            if not hasattr(pkg, 'versions'):
-                continue
-            if len(pkg.versions) > 1:
-                pkg.version_list.sort(apt_pkg.version_compare) # pylint: disable=no-member
-                version = pkg.version_list[0]
-                print("Multiple versions returned for %s - using newest: %s" % (pkg_name, pkg.version_list[0]))
-            else:
-                version = pkg.versions[0]
-            if not version.uri:
-                continue
-            os.makedirs(pkg_dir)
-            try:
-                version.fetch_binary(destdir=pkg_dir)
-            except TypeError as exc:
-                continue
-            except apt.package.FetchError as exc:
-                raise cliapp.AppException('Unable to fetch %s: %s' % (pkg_name, exc))
-        # FIXME: still need a Packages file and Release.
-        # Horribe hardcoded mess --------------------------------------
-        packages = check_output(['apt-ftparchive', '-o', 'Packages::Extensions=.udeb', 'packages', os.path.join(self.destdir, '..', 'pool', 'main')])
+            self.download_apt_file(pkg_name, pool_dir, False)
+
+    def download_base_debs(self, pkg_list):
+        # HACK HACK HACK
+        # Setting up a separate pool for debs, as apt-ftparchive
+        # isn't generating separate Packages files
+        pool_dir = os.path.join(self.destdir, '..', 'deb', 'pool', 'main')
+        if not os.path.exists(pool_dir):
+            os.makedirs(pool_dir)
+        for pkg_name in pkg_list:
+            self.download_apt_file(pkg_name, pool_dir, True)
+
+    def generate_packages_file(self, style='udeb'):
 	meta_dir = os.path.normpath(os.path.join(self.destdir, '..', 'dists',
 						 self.codename,
                                                  'main',
-                                                 'debian-installer',
-                                                 'binary-%s' % (self.architecture,)
-                                                ))
-        if not os.path.exists(meta_dir):
-            os.makedirs(meta_dir)
-        packages = re.sub(r"/tmp.*pool", "pool", packages)
-        with open(os.path.join(meta_dir, 'Packages'), 'w') as pkgout:
-            pkgout.write(packages)
-        # More mess, this time for debs
-        packages = check_output(['apt-ftparchive', '-o', 'Packages::Extensions=.deb', 'packages', os.path.join(self.destdir, '..', 'pool', 'main')])
-        meta_dir = os.path.normpath(os.path.join(self.destdir, '..', 'dists', self.codename, 'main', 'binary-%s' % (self.architecture,)))
+                                                 'binary-%s' % (self.architecture,)))
+        if style == 'udeb':
+            meta_dir = os.path.normpath(os.path.join(self.destdir, '..', 'dists',
+                                                     self.codename,
+                                                     'main',
+                                                     'debian-installer',
+                                                     'binary-%s' % (self.architecture,)))
+
+        current_dir=os.getcwd()
+        os.chdir(os.path.join(self.destdir, '..', style))
+        packages = check_output(['apt-ftparchive', '-o', 'Default::Packages::Extensions=.%s' %style,
+                                 'packages', os.path.join('pool', 'main')])
         if not os.path.exists(meta_dir):
             os.makedirs(meta_dir)
-        packages = re.sub(r"/tmp.*pool", "pool", packages)
         with open(os.path.join(meta_dir, 'Packages'), 'w') as pkgout:
             pkgout.write(packages)
+        os.chdir(current_dir)
+
+    # HACK HACK HACK
+    # Move all the separate trees of debs, udebs and Packages files into the right place
+    def merge_pools(self, sources):
+        for source in sources:
+            copytree(os.path.join(self.destdir, '..', source, 'pool'),
+                     os.path.join(self.destdir, '..', 'pool'))
+            shutil.rmtree(os.path.join(self.destdir, '..', source))
+
+    def generate_release_file(self):
         release = check_output([
                 'apt-ftparchive',
                 '-o', 'APT::FTPArchive::Release::Origin=Debian',
